{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport api from '../services/api';\nimport { Modal, Button } from 'react-bootstrap';\nconst Vision = () => {\n  _s();\n  // State for vision data\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [systemActive, setSystemActive] = useState(true);\n  const [cameraFeed, setCameraFeed] = useState(null);\n  const [detectionStats, setDetectionStats] = useState({\n    vehicles: 0,\n    pedestrians: 0,\n    traffic_signals: 0\n  });\n  const [incidents, setIncidents] = useState([]);\n\n  // Refs\n  const videoRef = useRef(null);\n\n  // Fetch vision data on component mount\n  useEffect(() => {\n    fetchVisionData();\n\n    // Set up periodic refresh\n    const interval = setInterval(fetchVisionData, 10000); // Refresh every 10 seconds\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  // Function to fetch vision data\n  const fetchVisionData = async () => {\n    try {\n      setLoading(true);\n\n      // Fetch vision statistics\n      const statsResponse = await api.get('/vision/stats');\n\n      // Update detection stats\n      setDetectionStats({\n        vehicles: statsResponse.data.detection_counts.vehicle || 0,\n        pedestrians: statsResponse.data.detection_counts.pedestrian || 0,\n        traffic_signals: (statsResponse.data.detection_counts.traffic_light || 0) + (statsResponse.data.detection_counts.traffic_sign || 0)\n      });\n\n      // Fetch recent detections for incidents\n      const detectionsResponse = await api.get('/vision/detections');\n\n      // Filter for emergency incidents\n      const emergencyClasses = ['ambulance', 'police_car', 'fire_truck', 'maintenance_vehicle', 'accident', 'fire', 'smoke'];\n      const emergencyDetections = detectionsResponse.data.filter(detection => emergencyClasses.includes(detection.detection_type));\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching vision data:', err);\n      setError('Failed to load vision data. Please try refreshing the page.');\n      setLoading(false);\n    }\n  };\n};\n_s(Vision, \"Ar8S75ntfUVLWvu8L63IUKt+OFw=\");\n_c = Vision;\nexport default Vision;\nvar _c;\n$RefreshReg$(_c, \"Vision\");","map":{"version":3,"names":["React","useState","useEffect","useRef","api","Modal","Button","Vision","_s","loading","setLoading","error","setError","systemActive","setSystemActive","cameraFeed","setCameraFeed","detectionStats","setDetectionStats","vehicles","pedestrians","traffic_signals","incidents","setIncidents","videoRef","fetchVisionData","interval","setInterval","clearInterval","statsResponse","get","data","detection_counts","vehicle","pedestrian","traffic_light","traffic_sign","detectionsResponse","emergencyClasses","emergencyDetections","filter","detection","includes","detection_type","err","console","_c","$RefreshReg$"],"sources":["C:/Users/veena/Documents/Sem 3/Cloud/Project/new code/Auto-Shipping-Truck-System/frontend/src/pages/Vision.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport api from '../services/api';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst Vision = () => {\r\n  // State for vision data\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [systemActive, setSystemActive] = useState(true);\r\n  const [cameraFeed, setCameraFeed] = useState(null);\r\n  const [detectionStats, setDetectionStats] = useState({\r\n    vehicles: 0,\r\n    pedestrians: 0,\r\n    traffic_signals: 0\r\n  });\r\n  const [incidents, setIncidents] = useState([]);\r\n  \r\n  // Refs\r\n  const videoRef = useRef(null);\r\n  \r\n  // Fetch vision data on component mount\r\n  useEffect(() => {\r\n    fetchVisionData();\r\n    \r\n    // Set up periodic refresh\r\n    const interval = setInterval(fetchVisionData, 10000); // Refresh every 10 seconds\r\n    \r\n    // Clean up interval on component unmount\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  \r\n  // Function to fetch vision data\r\n  const fetchVisionData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch vision statistics\r\n      const statsResponse = await api.get('/vision/stats');\r\n      \r\n      // Update detection stats\r\n      setDetectionStats({\r\n        vehicles: statsResponse.data.detection_counts.vehicle || 0,\r\n        pedestrians: statsResponse.data.detection_counts.pedestrian || 0,\r\n        traffic_signals: (statsResponse.data.detection_counts.traffic_light || 0) + \r\n                        (statsResponse.data.detection_counts.traffic_sign || 0)\r\n      });\r\n      \r\n      // Fetch recent detections for incidents\r\n      const detectionsResponse = await api.get('/vision/detections');\r\n      \r\n      // Filter for emergency incidents\r\n      const emergencyClasses = ['ambulance', 'police_car', 'fire_truck', 'maintenance_vehicle', 'accident', 'fire', 'smoke'];\r\n      const emergencyDetections = detectionsResponse.data.filter(detection => \r\n        emergencyClasses.includes(detection.detection_type)\r\n      );\r\n      \r\n      \r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('Error fetching vision data:', err);\r\n      setError('Failed to load vision data. Please try refreshing the page.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n}; \r\nexport default Vision;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,GAAG,MAAM,iBAAiB;AACjC,SAASC,KAAK,EAAEC,MAAM,QAAQ,iBAAiB;AAE/C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC;IACnDkB,QAAQ,EAAE,CAAC;IACXC,WAAW,EAAE,CAAC;IACdC,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMuB,QAAQ,GAAGrB,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACAD,SAAS,CAAC,MAAM;IACduB,eAAe,CAAC,CAAC;;IAEjB;IACA,MAAMC,QAAQ,GAAGC,WAAW,CAACF,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEtD;IACA,OAAO,MAAMG,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMD,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACFf,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAMmB,aAAa,GAAG,MAAMzB,GAAG,CAAC0B,GAAG,CAAC,eAAe,CAAC;;MAEpD;MACAZ,iBAAiB,CAAC;QAChBC,QAAQ,EAAEU,aAAa,CAACE,IAAI,CAACC,gBAAgB,CAACC,OAAO,IAAI,CAAC;QAC1Db,WAAW,EAAES,aAAa,CAACE,IAAI,CAACC,gBAAgB,CAACE,UAAU,IAAI,CAAC;QAChEb,eAAe,EAAE,CAACQ,aAAa,CAACE,IAAI,CAACC,gBAAgB,CAACG,aAAa,IAAI,CAAC,KACvDN,aAAa,CAACE,IAAI,CAACC,gBAAgB,CAACI,YAAY,IAAI,CAAC;MACxE,CAAC,CAAC;;MAEF;MACA,MAAMC,kBAAkB,GAAG,MAAMjC,GAAG,CAAC0B,GAAG,CAAC,oBAAoB,CAAC;;MAE9D;MACA,MAAMQ,gBAAgB,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,YAAY,EAAE,qBAAqB,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC;MACtH,MAAMC,mBAAmB,GAAGF,kBAAkB,CAACN,IAAI,CAACS,MAAM,CAACC,SAAS,IAClEH,gBAAgB,CAACI,QAAQ,CAACD,SAAS,CAACE,cAAc,CACpD,CAAC;MAGDjC,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOkC,GAAG,EAAE;MACZC,OAAO,CAAClC,KAAK,CAAC,6BAA6B,EAAEiC,GAAG,CAAC;MACjDhC,QAAQ,CAAC,6DAA6D,CAAC;MACvEF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;AACH,CAAC;AAACF,EAAA,CA5DID,MAAM;AAAAuC,EAAA,GAANvC,MAAM;AA6DZ,eAAeA,MAAM;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport api from '../services/api';\nimport { Modal, Button } from 'react-bootstrap';\nconst Vision = () => {\n  _s();\n  // State for vision data\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [systemActive, setSystemActive] = useState(true);\n  const [cameraFeed, setCameraFeed] = useState(null);\n  const [detectionStats, setDetectionStats] = useState({\n    vehicles: 0,\n    pedestrians: 0,\n    traffic_signals: 0\n  });\n  const [incidents, setIncidents] = useState([]);\n\n  // Refs\n  const videoRef = useRef(null);\n\n  // Fetch vision data on component mount\n  useEffect(() => {\n    fetchVisionData();\n\n    // Set up periodic refresh\n    const interval = setInterval(fetchVisionData, 10000); // Refresh every 10 seconds\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  // Function to fetch vision data\n  const fetchVisionData = async () => {\n    try {\n      setLoading(true);\n\n      // Fetch vision statistics\n      const statsResponse = await api.get('/vision/stats');\n\n      // Update detection stats\n      setDetectionStats({\n        vehicles: statsResponse.data.detection_counts.vehicle || 0,\n        pedestrians: statsResponse.data.detection_counts.pedestrian || 0,\n        traffic_signals: (statsResponse.data.detection_counts.traffic_light || 0) + (statsResponse.data.detection_counts.traffic_sign || 0)\n      });\n\n      // Fetch recent detections for incidents\n      const detectionsResponse = await api.get('/vision/detections');\n\n      // Filter for emergency incidents\n      const emergencyClasses = ['ambulance', 'police_car', 'fire_truck', 'accident', 'fire', 'smoke'];\n      const emergencyDetections = detectionsResponse.data.filter(detection => detection.is_emergency);\n\n      // Format incidents\n      const formattedIncidents = emergencyDetections.map(detection => {\n        // Determine severity based on detection type\n        let severity = 'warning';\n        let title = 'Warning';\n        if (['accident', 'fire'].includes(detection.detection_type)) {\n          severity = 'critical';\n          title = 'Critical Incident';\n        }\n        return {\n          id: detection.detection_id,\n          severity: severity,\n          title: title,\n          description: detection.message || 'Incident detected',\n          timestamp: detection.timestamp\n        };\n      });\n\n      // Add some simulated incidents if none were found\n      if (formattedIncidents.length === 0) {\n        formattedIncidents.push({\n          id: 'sim-1',\n          severity: 'critical',\n          title: 'Critical Incident',\n          description: 'Vehicle sudden brake detected at 50m',\n          timestamp: Math.floor(Date.now() / 1000) - 2\n        });\n        formattedIncidents.push({\n          id: 'sim-2',\n          severity: 'warning',\n          title: 'Warning',\n          description: 'Lane deviation detected',\n          timestamp: Math.floor(Date.now() / 1000) - 30\n        });\n      }\n      setIncidents(formattedIncidents);\n\n      // Simulate camera feed with a placeholder image\n      // In a real implementation, this would use WebRTC or similar technology\n      setCameraFeed('/static/images/truck_camera_feed.jpg');\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching vision data:', err);\n      setError('Failed to load vision data. Please try refreshing the page.');\n      setLoading(false);\n    }\n  };\n};\n_s(Vision, \"/0aPMwx7ZP+3Qh3NNqkrfcLZF28=\");\n_c = Vision;\nexport default Vision;\nvar _c;\n$RefreshReg$(_c, \"Vision\");","map":{"version":3,"names":["React","useState","useEffect","useRef","api","Modal","Button","Vision","_s","loading","setLoading","error","setError","systemActive","setSystemActive","cameraFeed","setCameraFeed","detectionStats","setDetectionStats","vehicles","pedestrians","traffic_signals","incidents","setIncidents","videoRef","fetchVisionData","interval","setInterval","clearInterval","statsResponse","get","data","detection_counts","vehicle","pedestrian","traffic_light","traffic_sign","detectionsResponse","emergencyClasses","emergencyDetections","filter","detection","is_emergency","formattedIncidents","map","severity","title","includes","detection_type","id","detection_id","description","message","timestamp","length","push","Math","floor","Date","now","err","console","_c","$RefreshReg$"],"sources":["/Users/sudipdas/Desktop/AST-test/frontend/src/pages/Vision.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport api from '../services/api';\nimport { Modal, Button } from 'react-bootstrap';\n\nconst Vision = () => {\n  // State for vision data\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [systemActive, setSystemActive] = useState(true);\n  const [cameraFeed, setCameraFeed] = useState(null);\n  const [detectionStats, setDetectionStats] = useState({\n    vehicles: 0,\n    pedestrians: 0,\n    traffic_signals: 0\n  });\n  const [incidents, setIncidents] = useState([]);\n  \n  // Refs\n  const videoRef = useRef(null);\n  \n  // Fetch vision data on component mount\n  useEffect(() => {\n    fetchVisionData();\n    \n    // Set up periodic refresh\n    const interval = setInterval(fetchVisionData, 10000); // Refresh every 10 seconds\n    \n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n  \n  // Function to fetch vision data\n  const fetchVisionData = async () => {\n    try {\n      setLoading(true);\n      \n      // Fetch vision statistics\n      const statsResponse = await api.get('/vision/stats');\n      \n      // Update detection stats\n      setDetectionStats({\n        vehicles: statsResponse.data.detection_counts.vehicle || 0,\n        pedestrians: statsResponse.data.detection_counts.pedestrian || 0,\n        traffic_signals: (statsResponse.data.detection_counts.traffic_light || 0) + \n                        (statsResponse.data.detection_counts.traffic_sign || 0)\n      });\n      \n      // Fetch recent detections for incidents\n      const detectionsResponse = await api.get('/vision/detections');\n      \n      // Filter for emergency incidents\n      const emergencyClasses = ['ambulance', 'police_car', 'fire_truck', 'accident', 'fire', 'smoke'];\n      const emergencyDetections = detectionsResponse.data.filter(detection => \n        detection.is_emergency\n      );\n      \n      // Format incidents\n      const formattedIncidents = emergencyDetections.map(detection => {\n        // Determine severity based on detection type\n        let severity = 'warning';\n        let title = 'Warning';\n        \n        if (['accident', 'fire'].includes(detection.detection_type)) {\n          severity = 'critical';\n          title = 'Critical Incident';\n        }\n        \n        return {\n          id: detection.detection_id,\n          severity: severity,\n          title: title,\n          description: detection.message || 'Incident detected',\n          timestamp: detection.timestamp\n        };\n      });\n      \n      // Add some simulated incidents if none were found\n      if (formattedIncidents.length === 0) {\n        formattedIncidents.push({\n          id: 'sim-1',\n          severity: 'critical',\n          title: 'Critical Incident',\n          description: 'Vehicle sudden brake detected at 50m',\n          timestamp: Math.floor(Date.now() / 1000) - 2\n        });\n        \n        formattedIncidents.push({\n          id: 'sim-2',\n          severity: 'warning',\n          title: 'Warning',\n          description: 'Lane deviation detected',\n          timestamp: Math.floor(Date.now() / 1000) - 30\n        });\n      }\n      \n      setIncidents(formattedIncidents);\n      \n      // Simulate camera feed with a placeholder image\n      // In a real implementation, this would use WebRTC or similar technology\n      setCameraFeed('/static/images/truck_camera_feed.jpg');\n      \n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching vision data:', err);\n      setError('Failed to load vision data. Please try refreshing the page.');\n      setLoading(false);\n    }\n  };\n}; \nexport default Vision;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}